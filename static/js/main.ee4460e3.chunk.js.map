{"version":3,"sources":["components/Navbar.jsx","components/SearchBar.jsx","components/MovieList.jsx","components/App.jsx","serviceWorker.js","index.jsx"],"names":["Navbar","className","href","Component","SearchBar","props","onFormSubmit","e","preventDefault","func","state","keyword","onTextChange","setState","target","value","onSubmit","this","type","placeholder","onChange","MovieList","toggle","prevState","modal","modalOpen","imdbID","poster","title","released","genre","director","actors","imdbRating","rated","runtime","plot","axios","get","params","apikey","i","then","res","data","Released","Genre","Director","Actors","Rated","Runtime","Plot","Modal","isOpen","centered","ModalBody","src","alt","onClick","renderList","map","item","key","Poster","Title","Year","App","onLoadClick","s","page","Search","movies","concat","onSearchSubmit","totalResults","parseInt","undefined","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ee4460e3.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nclass Navbar extends Component {\r\n    render() {\r\n        return (\r\n            <nav className=\"navbar navbar-expand-lg navbar-lg navbar-dark bg-dark\">\r\n                <div className=\"container\">\r\n                    <a className=\"navbar-brand\" href=\"/omdb-movie\">OMDb Movie</a>\r\n                </div>\r\n            </nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Navbar","import React, { Component } from 'react'\r\n\r\nclass SearchBar extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            keyword: ''\r\n        }\r\n    }\r\n\r\n    onFormSubmit = (e) => {\r\n        e.preventDefault()\r\n        this.props.func(this.state.keyword)\r\n    }\r\n\r\n    onTextChange = (e) => {\r\n        this.setState({\r\n            keyword: e.target.value\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"row mt-3 justify-content-center\">\r\n                <div className=\"col-8\">\r\n                    <form \r\n                    className=\"form-group mt-5 mb-5\" \r\n                    onSubmit={this.onFormSubmit}> \r\n                        <input \r\n                            type=\"text\" \r\n                            className=\"form-control\" \r\n                            placeholder=\"Type movie title\" \r\n                            onChange={this.onTextChange}\r\n                        />\r\n                    </form>\r\n                </div>\r\n            </div> \r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchBar","import React, { Component } from 'react'\r\nimport { Modal, ModalBody } from 'reactstrap'\r\nimport axios from 'axios'\r\n\r\nclass MovieList extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            modal: false,\r\n            poster: '',\r\n            title: '',\r\n            released: '',\r\n            genre: '',\r\n            director: '',\r\n            actors: '',\r\n            imdbRating : '',\r\n            rated: '',\r\n            runtime: '',\r\n            plot: ''\r\n        }\r\n    }\r\n\r\n    toggle = () => {\r\n        this.setState(prevState => ({\r\n            modal: !prevState.modal\r\n        }))\r\n    }\r\n\r\n    modalOpen = (imdbID, poster, title) => {\r\n        this.setState({\r\n            poster: poster,\r\n            title: title,\r\n            released: 'Loading data ...',\r\n            genre: 'Loading data ...',\r\n            director: 'Loading data ...',\r\n            actors: 'Loading data ...',\r\n            imdbRating : 'N/A',\r\n            rated: 'Loading data ...',\r\n            runtime: '',\r\n            plot: 'Loading data ...'\r\n        })\r\n        this.toggle()\r\n\r\n        axios.get(\r\n            'https://www.omdbapi.com/',\r\n            {\r\n                params: {\r\n                    apikey: '98e9d12',\r\n                    i: imdbID,\r\n                    plot: 'full'\r\n                }\r\n            }\r\n        ).then((res) => {\r\n            this.setState({\r\n                released: res.data.Released,\r\n                genre: res.data.Genre,\r\n                director: res.data.Director,\r\n                actors: res.data.Actors,\r\n                imdbRating : res.data.imdbRating,\r\n                rated: res.data.Rated,\r\n                runtime: res.data.Runtime,\r\n                plot: res.data.Plot\r\n            })\r\n        })\r\n    }\r\n\r\n    modal = () => {\r\n        return (\r\n            <div>\r\n                <Modal isOpen={this.state.modal} toggle={this.toggle} centered>\r\n                    <ModalBody className=\"modal-padding\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-4\">\r\n                                <img src={this.state.poster} alt={this.state.title} className=\"img-fluid\"/>\r\n                            </div>\r\n                            <div className=\"col-8\">\r\n                                <h3>{this.state.title}</h3>\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-8\">\r\n                                        <div className=\"imdb-rated\">{this.state.rated}</div>\r\n                                        <div className=\"imdb-runtime\">{this.state.runtime}</div>\r\n                                    </div>\r\n                                    <div className=\"col-4 text-right\">\r\n                                        <img className=\"imdb-star\" src=\"rating.png\"  alt=\"rating\"/>\r\n                                        <div className=\"imdb-rating\">{this.state.imdbRating}</div>\r\n                                        <div className=\"imdb-rating-divisor\">/10</div>\r\n                                    </div>  \r\n                                </div>\r\n                                <div className=\"row imdb-list\">\r\n                                    <div className=\"col-12 mt-2\">\r\n                                        <div className=\"row\">\r\n                                            <div className=\"col-4 pr-0 text-bold\">Release date</div>\r\n                                            <div className=\"col-8 pl-0\">{this.state.released}</div>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"col-12 mt-1\">\r\n                                        <div className=\"row\">\r\n                                            <div className=\"col-4 pr-0 text-bold\">Genre</div>\r\n                                            <div className=\"col-8 pl-0\">{this.state.genre}</div>\r\n                                        </div>\r\n                                    </div>          \r\n                                    <div className=\"col-12 mt-1\">\r\n                                        <div className=\"row\">\r\n                                            <div className=\"col-4 pr-0 text-bold\">Director</div>\r\n                                            <div className=\"col-8 pl-0\">{this.state.director}</div>\r\n                                        </div>\r\n                                    </div>               \r\n                                    <div className=\"col-12 mt-1\">\r\n                                        <div className=\"row\">\r\n                                            <div className=\"col-4 pr-0 text-bold\">Actors</div>\r\n                                            <div className=\"col-8 pl-0\">{this.state.actors}</div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12 mt-4 mb-4\">\r\n                                <div className=\"plot-description\">{this.state.plot}</div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-2 text-right ml-auto\">\r\n                                <div className=\"close-button\" onClick={this.toggle}>Close</div>\r\n                            </div>  \r\n                        </div>\r\n                    </ModalBody>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    renderList = () => {\r\n        return this.props.data.map((item) => {\r\n            return (\r\n                <div className=\"col-xl-2 col-lg-2 col-md-3 col-sm-4 col-6\" key={item.imdbID} onClick={() => {this.modalOpen(item.imdbID, item.Poster, item.Title)}}>\r\n                    <div className=\"card card-size mb-4 card-link\">\r\n                        <img src={item.Poster} className=\"card-image\" alt={item.Title}/>\r\n                        <div className=\"card-body\">\r\n                        <h6 className=\"card-title word-break\">{item.Title}</h6>\r\n                        <div className=\"card-subtitle text-muted\">{item.Year}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            ) \r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"row\">  \r\n                {this.renderList()}\r\n                {this.modal()}\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default MovieList","import React, { Component } from 'react'\r\nimport Navbar from './Navbar'\r\nimport SearchBar from './SearchBar'\r\nimport MovieList from './MovieList'\r\nimport axios from 'axios'\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            movies: [],\r\n            keyword: '',\r\n            totalResults: '',\r\n            page: 2\r\n        }\r\n    }\r\n\r\n    onLoadClick = () => {\r\n        axios.get(\r\n            'https://www.omdbapi.com/',\r\n            {\r\n                params: {\r\n                    apikey: '98e9d12',\r\n                    s: this.state.keyword,\r\n                    page: this.state.page\r\n                }\r\n            }\r\n        ).then((res) => {\r\n            if (res.data.Search){\r\n                this.setState(\r\n                    (state) => ({\r\n                        movies: state.movies.concat(res.data.Search),\r\n                        page: state.page + 1\r\n                    })\r\n                )\r\n            }\r\n        })\r\n    }\r\n\r\n    onSearchSubmit = (keyword) => {\r\n        axios.get(\r\n            'https://www.omdbapi.com/',\r\n            {\r\n                params: {\r\n                    apikey: '98e9d12',\r\n                    s: keyword\r\n                }\r\n            }\r\n        ).then((res) => {\r\n            this.setState({\r\n                movies: res.data.Search,\r\n                keyword: keyword,\r\n                totalResults: parseInt(res.data.totalResults)\r\n            })\r\n        })\r\n    }\r\n\r\n    render(){\r\n        if (this.state.movies === undefined){\r\n            return (\r\n                <div>\r\n                    <Navbar/>\r\n                    <div className=\"container\">\r\n                        <SearchBar func = {this.onSearchSubmit} />\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12 text-center mt-4 mb-5\">\r\n                                No data found\r\n                            </div>\r\n                        </div> \r\n                    </div> \r\n                </div>\r\n            )\r\n        } else if (this.state.movies.length === this.state.totalResults ){\r\n            return (\r\n                <div>\r\n                    <Navbar/>\r\n                    <div className=\"container\">\r\n                        <SearchBar func = {this.onSearchSubmit} />\r\n                        <MovieList data = {this.state.movies} />\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12 text-center mt-4 mb-5\">\r\n                                All data loaded\r\n                            </div>\r\n                        </div>  \r\n                    </div>\r\n                </div>\r\n            )\r\n        } else if (this.state.movies.length === 0){\r\n            return (\r\n                <div>\r\n                    <Navbar/>\r\n                    <div className=\"container\">\r\n                        <SearchBar func = {this.onSearchSubmit} />\r\n                    </div>\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                <div>\r\n                    <Navbar/>\r\n                    <div className=\"container\">\r\n                        <SearchBar func = {this.onSearchSubmit} />\r\n                        <MovieList data = {this.state.movies} />\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12 text-center mt-4 mb-5\">\r\n                                <button type=\"button\" className=\"btn btn-dark\" onClick={this.onLoadClick}>Load More</button>\r\n                            </div>\r\n                        </div>  \r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App'\nimport './style.css'\n// import './index.css';\n// import App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}